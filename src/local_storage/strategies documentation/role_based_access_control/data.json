{
    "problem": "How to assign rights to users according to their roles in an institution.",
    "context": "Most institutions have a variety of job functions that require different skills and responsibilities. For security reasons users should get rights based on their job functions. This corresponds to the application of the need-to-know principle, a fundamental security policy [Sum97]. Job functions can be interpreted as roles that people play in performing their duties. In particular, web-based systems have a variety of users: company employees, customers, partners, search engines, etc.",
    "forces": "-People in institutions have different needs for access to information, according to their functions;\n-We want to help the institution to define precise access rights for its members according to a need-to-know policy;\n-Granting rights to individual users would require storing many authorization rules and it would also be hard for administrators to keep track of these rules;\n-Users may have more than one role and we may want to enforce policies such as separation of duty, where a user cannot be in two specific roles in the same session;\n-We may need to have hierarchies of roles, with inheritance of rights;\n-A role may be assigned to individual users or to groups of users.",
    "solution": "Extend the idea of the previous pattern interpreting roles as subjects. A basic model for Role-Based Access Control (RBAC) is shown in Figure 1 below. Classes User and Role describe the registered users and the predefined roles, respectively. Users are assigned to roles, roles are given rights according to their functions. The association class Right defines the access types that a user within a role is authorized to apply to the protection object. In fact, the combination Role, ProtectionObject, and Right is an instance of the Authorization pattern. Accordingly, the predicate indicates content dependent restrictions that can be used to select specific objects. The attribute copy_flag indicates a Boolean value (true/false).\nThe model of Figure 2 considers additionally composite roles (an application of the Composite pattern) and separation of administration from other rights (an application of the policy of separation of duties). The model also includes a constraint to enforce a separation of duties. The administrator has the right to assign roles to groups and users, he is a special user who can assign users to roles and rights to a role. Rights for security administration usually include: Definition of authorization rules for roles; Creation/deletion of user groups; Assignment of users to roles.\nFigure 2 also includes the concept of Session, that corresponds to the way to use a role and that can be used to enforce role exclusion at execution time. Finally, class Group describes groups of users that can be assigned to the same role.",
    "rationale": "not given",
    "consequences": "Among the advantages of this pattern we have:\n-It allows administrators to reduce the complexity of security, there are much more users than roles;\n-Institution policies about job functions can be reflected directly in the definition of roles and the assignment of users to roles;\n-Roles can be structured for further flexibility and reduction of rules;\n-Users can activate more than one session at a time for functional flexibility (some tasks may require multiple views or different types of actions);\n-We can add UML constraints to indicate that some roles cannot be used in the same session or given to the same user (separation of duty);\n-Groups of users can be used as role members, thus further reducing the number of authorization rules and the number of role assignments.\nPossible disadvantages include:\n-Additional conceptual complexity (new concept of roles, assignments to multiple roles,…).",
    "examples": "\n-RBAC is implemented in a variety of commercial systems, including Suns J2EE [Jaw00];\n-Microsofts Windows 2000, IBMs WebSphere, and Oracle, among others;\n-The basic security facilities of Javas JDK 1.2 have been shown to be able to support a rich variety of RBAC policies [Giu99].",
    "related strategies": "-Composition;\n-Role [Bau00];\n-Abstraction Session [Pry00].",
    "complementary references": "-Pattern itsef, texts and images were directly extracted from the following study:  Eduardo B. Fernandez and Rouyi Pan. “A pattern language for security models”;\n-[Sum97] R. C. Summers, Secure Computing: Threats and Safeguards, McGraw-Hill, 1997;\n-[Fer94] - E. B. Fernandez, J. Wu, and M. H. Fernandez, User group structures in object-oriented databases, Proc. 8th Annual IFIP W.G.11.3 Working Conference on Database Security, Bad Salzdetfurth, Germany, August 1994;\n-[San96] R. Sandhu et al., Role-Based Access Control models, Computer , vol. 29 , No2, February 1996, 38-47;\n-[Jaw00] J. Jaworski and P.J. Perrone, Java security handbook, SAMS, Indianapolis, IN, 2000;\n-[Giu99] L. Giuri, Role-Based Access Control on the web using Java, Procs. of RBAC99, ACM 1999, 11-18;\n-[Bau00] D.Baumer, D. Riehle, W. Siberski, and M. Wolf, Role Object, Chapter 2 in Pattern Languages of Program Design 4 (N. Harrison, B. Foote, and H. Rohnert, Eds.). Also in Procs. of PLoP97, http://jerry.cs.uiuc.edu/~plop/plop97;\n-[Pry00] N. Pryce, Abstract session: An object structural pattern, Chapter 7 in Pattern Languages of Program Design 4 (N. Harrison, B. Foote, and H. Rohnert, Eds.). Also in Procs. of PLoP97, http://jerry.cs.uiuc.edu/~plop/plop97."
}